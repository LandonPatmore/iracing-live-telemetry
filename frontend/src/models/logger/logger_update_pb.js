// source: logger/logger_update.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.com.landonpatmore.models.logger.LoggerGeneral', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.landonpatmore.models.logger.LoggerGeneral = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.landonpatmore.models.logger.LoggerGeneral.repeatedFields_, null);
};
goog.inherits(proto.com.landonpatmore.models.logger.LoggerGeneral, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.landonpatmore.models.logger.LoggerGeneral.displayName = 'proto.com.landonpatmore.models.logger.LoggerGeneral';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.toObject = function(opt_includeInstance) {
  return proto.com.landonpatmore.models.logger.LoggerGeneral.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.landonpatmore.models.logger.LoggerGeneral} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.toObject = function(includeInstance, msg) {
  var f, obj = {
    tick: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trackid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    trackconfigname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    numturns: jspb.Message.getFieldWithDefault(msg, 5, 0),
    pitspeedlimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sectorsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    totaltime: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.landonpatmore.models.logger.LoggerGeneral;
  return proto.com.landonpatmore.models.logger.LoggerGeneral.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.landonpatmore.models.logger.LoggerGeneral} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTick(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrackid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrackconfigname(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumturns(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitspeedlimit(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSectors(values[i]);
      }
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotaltime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.landonpatmore.models.logger.LoggerGeneral.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.landonpatmore.models.logger.LoggerGeneral} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSectorsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional int32 tick = 1;
 * @return {number}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setTick = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearTick = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasTick = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 trackId = 3;
 * @return {number}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getTrackid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setTrackid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearTrackid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasTrackid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string trackConfigName = 4;
 * @return {string}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getTrackconfigname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setTrackconfigname = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearTrackconfigname = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasTrackconfigname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 numTurns = 5;
 * @return {number}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getNumturns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setNumturns = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearNumturns = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasNumturns = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 pitSpeedLimit = 6;
 * @return {number}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getPitspeedlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setPitspeedlimit = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearPitspeedlimit = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasPitspeedlimit = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated float sectors = 7;
 * @return {!Array<number>}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getSectorsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setSectorsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.addSectors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearSectorsList = function() {
  return this.setSectorsList([]);
};


/**
 * optional float totalTime = 8;
 * @return {number}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.getTotaltime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.setTotaltime = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.landonpatmore.models.logger.LoggerGeneral} returns this
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.clearTotaltime = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.landonpatmore.models.logger.LoggerGeneral.prototype.hasTotaltime = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.com.landonpatmore.models.logger);
