//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobufs/streaming.proto

package streaming;

@kotlin.jvm.JvmSynthetic
public inline fun session(block: streaming.SessionKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Session =
  streaming.SessionKt.Dsl._create(streaming.Streaming.Session.newBuilder()).apply { block() }._build()
public object SessionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: streaming.Streaming.Session.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: streaming.Streaming.Session.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): streaming.Streaming.Session = _builder.build()

    /**
     * <code>optional int32 tick = 1;</code>
     */
    public var tick: kotlin.Int
      @JvmName("getTick")
      get() = _builder.getTick()
      @JvmName("setTick")
      set(value) {
        _builder.setTick(value)
      }
    /**
     * <code>optional int32 tick = 1;</code>
     */
    public fun clearTick() {
      _builder.clearTick()
    }
    /**
     * <code>optional int32 tick = 1;</code>
     * @return Whether the tick field is set.
     */
    public fun hasTick(): kotlin.Boolean {
      return _builder.hasTick()
    }

    /**
     * <code>optional float timeOfDay = 2;</code>
     */
    public var timeOfDay: kotlin.Float
      @JvmName("getTimeOfDay")
      get() = _builder.getTimeOfDay()
      @JvmName("setTimeOfDay")
      set(value) {
        _builder.setTimeOfDay(value)
      }
    /**
     * <code>optional float timeOfDay = 2;</code>
     */
    public fun clearTimeOfDay() {
      _builder.clearTimeOfDay()
    }
    /**
     * <code>optional float timeOfDay = 2;</code>
     * @return Whether the timeOfDay field is set.
     */
    public fun hasTimeOfDay(): kotlin.Boolean {
      return _builder.hasTimeOfDay()
    }

    /**
     * <code>optional float timeRemaining = 3;</code>
     */
    public var timeRemaining: kotlin.Float
      @JvmName("getTimeRemaining")
      get() = _builder.getTimeRemaining()
      @JvmName("setTimeRemaining")
      set(value) {
        _builder.setTimeRemaining(value)
      }
    /**
     * <code>optional float timeRemaining = 3;</code>
     */
    public fun clearTimeRemaining() {
      _builder.clearTimeRemaining()
    }
    /**
     * <code>optional float timeRemaining = 3;</code>
     * @return Whether the timeRemaining field is set.
     */
    public fun hasTimeRemaining(): kotlin.Boolean {
      return _builder.hasTimeRemaining()
    }

    /**
     * <code>optional float totalLaps = 4;</code>
     */
    public var totalLaps: kotlin.Float
      @JvmName("getTotalLaps")
      get() = _builder.getTotalLaps()
      @JvmName("setTotalLaps")
      set(value) {
        _builder.setTotalLaps(value)
      }
    /**
     * <code>optional float totalLaps = 4;</code>
     */
    public fun clearTotalLaps() {
      _builder.clearTotalLaps()
    }
    /**
     * <code>optional float totalLaps = 4;</code>
     * @return Whether the totalLaps field is set.
     */
    public fun hasTotalLaps(): kotlin.Boolean {
      return _builder.hasTotalLaps()
    }

    /**
     * <code>optional float lapsRemaining = 5;</code>
     */
    public var lapsRemaining: kotlin.Float
      @JvmName("getLapsRemaining")
      get() = _builder.getLapsRemaining()
      @JvmName("setLapsRemaining")
      set(value) {
        _builder.setLapsRemaining(value)
      }
    /**
     * <code>optional float lapsRemaining = 5;</code>
     */
    public fun clearLapsRemaining() {
      _builder.clearLapsRemaining()
    }
    /**
     * <code>optional float lapsRemaining = 5;</code>
     * @return Whether the lapsRemaining field is set.
     */
    public fun hasLapsRemaining(): kotlin.Boolean {
      return _builder.hasLapsRemaining()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun streaming.Streaming.Session.copy(block: streaming.SessionKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Session =
  streaming.SessionKt.Dsl._create(this.toBuilder()).apply { block() }._build()
