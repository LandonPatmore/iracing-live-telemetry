//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobufs/streaming.proto

package streaming;

@kotlin.jvm.JvmSynthetic
public inline fun weather(block: streaming.WeatherKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Weather =
  streaming.WeatherKt.Dsl._create(streaming.Streaming.Weather.newBuilder()).apply { block() }._build()
public object WeatherKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: streaming.Streaming.Weather.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: streaming.Streaming.Weather.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): streaming.Streaming.Weather = _builder.build()

    /**
     * <code>optional float airTemp = 1;</code>
     */
    public var airTemp: kotlin.Float
      @JvmName("getAirTemp")
      get() = _builder.getAirTemp()
      @JvmName("setAirTemp")
      set(value) {
        _builder.setAirTemp(value)
      }
    /**
     * <code>optional float airTemp = 1;</code>
     */
    public fun clearAirTemp() {
      _builder.clearAirTemp()
    }
    /**
     * <code>optional float airTemp = 1;</code>
     * @return Whether the airTemp field is set.
     */
    public fun hasAirTemp(): kotlin.Boolean {
      return _builder.hasAirTemp()
    }

    /**
     * <code>optional float trackTemp = 2;</code>
     */
    public var trackTemp: kotlin.Float
      @JvmName("getTrackTemp")
      get() = _builder.getTrackTemp()
      @JvmName("setTrackTemp")
      set(value) {
        _builder.setTrackTemp(value)
      }
    /**
     * <code>optional float trackTemp = 2;</code>
     */
    public fun clearTrackTemp() {
      _builder.clearTrackTemp()
    }
    /**
     * <code>optional float trackTemp = 2;</code>
     * @return Whether the trackTemp field is set.
     */
    public fun hasTrackTemp(): kotlin.Boolean {
      return _builder.hasTrackTemp()
    }

    /**
     * <code>optional float windDirection = 3;</code>
     */
    public var windDirection: kotlin.Float
      @JvmName("getWindDirection")
      get() = _builder.getWindDirection()
      @JvmName("setWindDirection")
      set(value) {
        _builder.setWindDirection(value)
      }
    /**
     * <code>optional float windDirection = 3;</code>
     */
    public fun clearWindDirection() {
      _builder.clearWindDirection()
    }
    /**
     * <code>optional float windDirection = 3;</code>
     * @return Whether the windDirection field is set.
     */
    public fun hasWindDirection(): kotlin.Boolean {
      return _builder.hasWindDirection()
    }

    /**
     * <code>optional float windVelocity = 4;</code>
     */
    public var windVelocity: kotlin.Float
      @JvmName("getWindVelocity")
      get() = _builder.getWindVelocity()
      @JvmName("setWindVelocity")
      set(value) {
        _builder.setWindVelocity(value)
      }
    /**
     * <code>optional float windVelocity = 4;</code>
     */
    public fun clearWindVelocity() {
      _builder.clearWindVelocity()
    }
    /**
     * <code>optional float windVelocity = 4;</code>
     * @return Whether the windVelocity field is set.
     */
    public fun hasWindVelocity(): kotlin.Boolean {
      return _builder.hasWindVelocity()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun streaming.Streaming.Weather.copy(block: streaming.WeatherKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Weather =
  streaming.WeatherKt.Dsl._create(this.toBuilder()).apply { block() }._build()
