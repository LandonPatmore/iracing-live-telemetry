//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: protobufs/streaming.proto

package streaming;

@kotlin.jvm.JvmSynthetic
public inline fun info(block: streaming.InfoKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Info =
  streaming.InfoKt.Dsl._create(streaming.Streaming.Info.newBuilder()).apply { block() }._build()
public object InfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: streaming.Streaming.Info.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: streaming.Streaming.Info.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): streaming.Streaming.Info = _builder.build()

    /**
     * <code>optional .streaming.Car car = 1;</code>
     */
    public var car: streaming.Streaming.Car
      @JvmName("getCar")
      get() = _builder.getCar()
      @JvmName("setCar")
      set(value) {
        _builder.setCar(value)
      }
    /**
     * <code>optional .streaming.Car car = 1;</code>
     */
    public fun clearCar() {
      _builder.clearCar()
    }
    /**
     * <code>optional .streaming.Car car = 1;</code>
     * @return Whether the car field is set.
     */
    public fun hasCar(): kotlin.Boolean {
      return _builder.hasCar()
    }

    /**
     * <code>optional .streaming.Session session = 2;</code>
     */
    public var session: streaming.Streaming.Session
      @JvmName("getSession")
      get() = _builder.getSession()
      @JvmName("setSession")
      set(value) {
        _builder.setSession(value)
      }
    /**
     * <code>optional .streaming.Session session = 2;</code>
     */
    public fun clearSession() {
      _builder.clearSession()
    }
    /**
     * <code>optional .streaming.Session session = 2;</code>
     * @return Whether the session field is set.
     */
    public fun hasSession(): kotlin.Boolean {
      return _builder.hasSession()
    }

    /**
     * <code>optional .streaming.Weather weather = 3;</code>
     */
    public var weather: streaming.Streaming.Weather
      @JvmName("getWeather")
      get() = _builder.getWeather()
      @JvmName("setWeather")
      set(value) {
        _builder.setWeather(value)
      }
    /**
     * <code>optional .streaming.Weather weather = 3;</code>
     */
    public fun clearWeather() {
      _builder.clearWeather()
    }
    /**
     * <code>optional .streaming.Weather weather = 3;</code>
     * @return Whether the weather field is set.
     */
    public fun hasWeather(): kotlin.Boolean {
      return _builder.hasWeather()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class CompetitorsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     */
     public val competitors: com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getCompetitorsList()
      )
    /**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     * @param value The competitors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addCompetitors")
    public fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.add(value: streaming.Streaming.Competitor) {
      _builder.addCompetitors(value)
    }/**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     * @param value The competitors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignCompetitors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.plusAssign(value: streaming.Streaming.Competitor) {
      add(value)
    }/**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     * @param values The competitors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllCompetitors")
    public fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.addAll(values: kotlin.collections.Iterable<streaming.Streaming.Competitor>) {
      _builder.addAllCompetitors(values)
    }/**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     * @param values The competitors to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllCompetitors")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.plusAssign(values: kotlin.collections.Iterable<streaming.Streaming.Competitor>) {
      addAll(values)
    }/**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     * @param index The index to set the value at.
     * @param value The competitors to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setCompetitors")
    public operator fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.set(index: kotlin.Int, value: streaming.Streaming.Competitor) {
      _builder.setCompetitors(index, value)
    }/**
     * <code>repeated .streaming.Competitor competitors = 4;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearCompetitors")
    public fun com.google.protobuf.kotlin.DslList<streaming.Streaming.Competitor, CompetitorsProxy>.clear() {
      _builder.clearCompetitors()
    }}
}
@kotlin.jvm.JvmSynthetic
public inline fun streaming.Streaming.Info.copy(block: streaming.InfoKt.Dsl.() -> kotlin.Unit): streaming.Streaming.Info =
  streaming.InfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
